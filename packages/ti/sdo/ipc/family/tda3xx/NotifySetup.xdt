%%{
/*
 * Copyright (c) 2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var pkg = this.$package.$name.replace(/\./g, "_");

%%}
#include <ti/ipc/Notify.h>

/*
 *  ======== `pkg`_NotifySetup_attach ========
 */
Int `pkg`_NotifySetup_attach(UInt16 remoteProcId, Ptr sharedAddr)
{
    Int status = Notify_E_FAIL;
    `pkg`_NotifySetup_Driver driver;

    driver = `pkg`_NotifySetup_driverType(remoteProcId);

    switch (driver) {
% if (this.$private.driverMask & this.Driver_SHAREDMEMORY) {
        case `pkg`_NotifySetup_Driver_SHAREDMEMORY:
            status = `pkg`_NotifySetup_Shm_attach(remoteProcId, sharedAddr);
            break;
% }
% if (this.$private.driverMask & this.Driver_MAILBOX) {
        case `pkg`_NotifySetup_Driver_MAILBOX:
            status = `pkg`_NotifySetup_Mbx_attach(remoteProcId, sharedAddr);
            break;
% }
        default:
            xdc_runtime_Assert_isTrue(FALSE, `pkg`_NotifySetup_A_internal);
            break;
    }

    return (status);
}

/*!
 *  ======== `pkg`_NotifySetup_sharedMemReq ========
 */
SizeT `pkg`_NotifySetup_sharedMemReq(UInt16 remoteProcId, Ptr sharedAddr)
{
    `pkg`_NotifySetup_Driver driver;
    SizeT memReq = 0;

    driver = `pkg`_NotifySetup_driverType(remoteProcId);

    switch (driver) {
% if (this.$private.driverMask & this.Driver_SHAREDMEMORY) {
        case `pkg`_NotifySetup_Driver_SHAREDMEMORY:
            memReq = `pkg`_NotifySetup_Shm_sharedMemReq(remoteProcId,
                    sharedAddr);
            break;
% }
% if (this.$private.driverMask & this.Driver_MAILBOX) {
        case `pkg`_NotifySetup_Driver_MAILBOX:
            memReq = `pkg`_NotifySetup_Mbx_sharedMemReq(remoteProcId,
                    sharedAddr);
            break;
% }
        default:
            xdc_runtime_Assert_isTrue(FALSE, `pkg`_NotifySetup_A_internal);
            break;
    }

    return (memReq);
}
